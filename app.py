import streamlit as st
import os
from utils.auth import check_authentication, login_page, get_user_index_id
from utils.navigation import setup_navigation
from utils.config import get_api_keys
from utils.index_manager import IndexManager

# Page configuration
st.set_page_config(
    page_title="PDF QA Bot v2",
    page_icon="üìÑ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Initialize session state
if 'authenticated' not in st.session_state:
    st.session_state.authenticated = False
if 'username' not in st.session_state:
    st.session_state.username = None
if 'current_index' not in st.session_state:
    st.session_state.current_index = None
if 'index_manager' not in st.session_state:
    st.session_state.index_manager = None
if 'document_metadata' not in st.session_state:
    st.session_state.document_metadata = []
if 'chat_histories' not in st.session_state:
    st.session_state.chat_histories = {}
if 'current_page' not in st.session_state:
    st.session_state.current_page = 'home'

def main():
    # Check authentication
    if not st.session_state.authenticated:
        login_page()
        return
    
    # Get API keys
    openai_key, pinecone_key, using_secrets = get_api_keys()
    
    if not openai_key or not pinecone_key:
        st.error("üîê API keys not configured. Please check your secrets configuration.")
        st.info("Required: OPENAI_API_KEY and PINECONE_API_KEY")
        return
    
    # Set environment variables
    os.environ["OPENAI_API_KEY"] = openai_key
    os.environ["PINECONE_API_KEY"] = pinecone_key
    
    # Initialize index manager
    if not st.session_state.index_manager:
        st.session_state.index_manager = IndexManager(pinecone_key)
    
    # Setup navigation
    setup_navigation()
    
    # Get current page
    from utils.navigation import get_current_page
    current_page = get_current_page()
    
    # Route to appropriate page
    if current_page == 'chat':
        from pages.chat import render_chat_page
        render_chat_page()
    elif current_page == 'upload':
        from pages.upload import render_upload_page
        render_upload_page()
    elif current_page == 'documents':
        from pages.documents import render_documents_page
        render_documents_page()
    elif current_page == 'index_management':
        render_index_management_page()
    else:
        # Home page
        render_home_page()

def render_home_page():
    """Render the home page"""
    st.markdown("## üìÑ PDF Question Answering System v2")
    
    # Display current user and index info
    col1, col2, col3 = st.columns(3)
    with col1:
        st.info(f"üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {st.session_state.username}")
    with col2:
        user_id = get_user_index_id(st.session_state.username)
        current_index_type = "–õ–∏—á–Ω—ã–π" if st.session_state.current_index and st.session_state.current_index.endswith(f"-{user_id}") else "–û–±—â–∏–π"
        st.info(f"üìä **–ò–Ω–¥–µ–∫—Å:** {current_index_type}")
    with col3:
        if st.button("üö™ –í—ã–π—Ç–∏"):
            st.session_state.authenticated = False
            st.session_state.username = None
            st.rerun()
    
    # Welcome message
    st.markdown("""
    ### –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —É–ª—É—á—à–µ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É —Ä–∞–±–æ—Ç—ã —Å PDF –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏!
    
    **–ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
    - üîê –°–∏—Å—Ç–µ–º–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã
    - üìÅ –õ–∏—á–Ω—ã–µ –∏ –æ–±—â–∏–µ –∏–Ω–¥–µ–∫—Å—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    - üí¨ –£–ª—É—á—à–µ–Ω–Ω—ã–π —á–∞—Ç-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    - üìé –£–¥–æ–±–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    - üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏
    
    –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∞–≤–∏–≥–∞—Ü–∏—é —Å–ª–µ–≤–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –º–µ–∂–¥—É —Ä–∞–∑–¥–µ–ª–∞–º–∏.
    """)
    
    # Quick stats
    if st.session_state.index_manager:
        st.markdown("### üìä –ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        
        col1, col2 = st.columns(2)
        
        with col1:
            # Personal index stats
            user_id = get_user_index_id(st.session_state.username)
            personal_index = f"pdf-qa-personal-{user_id}"
            personal_stats = st.session_state.index_manager.get_index_stats(personal_index)
            if personal_stats["status"] == "success":
                st.metric("üîí –õ–∏—á–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã", f"{personal_stats['total_vectors']:,}")
            else:
                st.metric("üîí –õ–∏—á–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã", "0")
        
        with col2:
            # Shared index stats
            shared_stats = st.session_state.index_manager.get_index_stats("pdf-qa-shared")
            if shared_stats["status"] == "success":
                st.metric("üë• –û–±—â–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã", f"{shared_stats['total_vectors']:,}")
            else:
                st.metric("üë• –û–±—â–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã", "0")

def render_index_management_page():
    """Render index management page"""
    st.markdown("# üîÑ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞–º–∏")
    
    if not st.session_state.index_manager:
        st.error("–ú–µ–Ω–µ–¥–∂–µ—Ä –∏–Ω–¥–µ–∫—Å–æ–≤ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return
    
    # Current index info
    st.markdown("## üìä –¢–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å")
    user_id = get_user_index_id(st.session_state.username)
    current_index = st.session_state.current_index or f"pdf-qa-personal-{user_id}"
    index_type = "–õ–∏—á–Ω—ã–π" if current_index.endswith(f"-{user_id}") else "–û–±—â–∏–π"
    
    col1, col2 = st.columns(2)
    with col1:
        st.info(f"**–ê–∫—Ç–∏–≤–Ω—ã–π –∏–Ω–¥–µ–∫—Å:** {index_type}")
        st.info(f"**–ò–º—è –∏–Ω–¥–µ–∫—Å–∞:** {current_index}")
    
    with col2:
        stats = st.session_state.index_manager.get_index_stats(current_index)
        if stats["status"] == "success":
            st.metric("–î–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –∏–Ω–¥–µ–∫—Å–µ", f"{stats['total_vectors']:,}")
            st.metric("–ó–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å", f"{stats['index_fullness']:.2%}")
        else:
            st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
    
    # Index switching
    st.markdown("## üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤")
    
    col1, col2 = st.columns(2)
    with col1:
        if st.button("üîí –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –ª–∏—á–Ω—ã–π –∏–Ω–¥–µ–∫—Å", use_container_width=True):
            user_id = get_user_index_id(st.session_state.username)
            st.session_state.current_index = f"pdf-qa-personal-{user_id}"
            st.success("–ü–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ –ª–∏—á–Ω—ã–π –∏–Ω–¥–µ–∫—Å")
            st.rerun()
    
    with col2:
        if st.button("üë• –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –æ–±—â–∏–π –∏–Ω–¥–µ–∫—Å", use_container_width=True):
            st.session_state.current_index = "pdf-qa-shared"
            st.success("–ü–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ –æ–±—â–∏–π –∏–Ω–¥–µ–∫—Å")
            st.rerun()
    
    # Advanced operations
    st.markdown("## ‚öôÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏")
    
    with st.expander("üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –∏–Ω–¥–µ–∫—Å–∞"):
        st.warning("‚ö†Ô∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!")
        
        if st.button("–û—á–∏—Å—Ç–∏—Ç—å —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å"):
            result = st.session_state.index_manager.clear_index(current_index)
            if result["status"] == "success":
                st.success(result["message"])
            else:
                st.error(result["message"])

if __name__ == "__main__":
    main()