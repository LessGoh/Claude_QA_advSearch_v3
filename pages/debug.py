import streamlit as st
from utils.rag import ask_question
from utils.enhanced_rag import ask_question_enhanced
from utils.auth import get_user_index_id
from utils.config import get_api_keys
import logging

class DebugPage:
    def __init__(self):
        # Initialize enhanced processor
        openai_key, pinecone_key, _ = get_api_keys()
        if openai_key and pinecone_key:
            try:
                from utils.enhanced_document_processor import EnhancedDocumentProcessor
                self.enhanced_processor = EnhancedDocumentProcessor(openai_key, pinecone_key)
            except Exception as e:
                st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä: {e}")
                self.enhanced_processor = None
        else:
            self.enhanced_processor = None
    
    def render(self):
        st.markdown("# üîç –û—Ç–ª–∞–¥–∫–∞ –ø–æ–∏—Å–∫–∞")
        
        # Enable debug mode
        st.session_state.debug_mode = True
        
        # Check if vectorstore is available
        if not st.session_state.index_manager:
            st.error("–ú–µ–Ω–µ–¥–∂–µ—Ä –∏–Ω–¥–µ–∫—Å–æ–≤ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return
        
        vectorstore = st.session_state.index_manager.get_current_vectorstore()
        if not vectorstore:
            st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return
        
        # Display current index info
        current_index_name = st.session_state.current_index or "–ù–µ –≤—ã–±—Ä–∞–Ω"
        user_id = get_user_index_id(st.session_state.username)
        index_type = "–õ–∏—á–Ω—ã–π" if current_index_name.endswith(f"-{user_id}") else "–û–±—â–∏–π"
        
        st.info(f"üìä **–¢–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å:** {index_type} ({current_index_name})")
        
        # Index statistics
        try:
            stats = st.session_state.index_manager.get_index_stats(current_index_name)
            if stats["status"] == "success":
                col1, col2, col3 = st.columns(3)
                with col1:
                    st.metric("–í–µ–∫—Ç–æ—Ä–æ–≤ –≤ –∏–Ω–¥–µ–∫—Å–µ", stats['total_vectors'])
                with col2:
                    st.metric("–†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å", stats.get('dimension', 'N/A'))
                with col3:
                    fullness = stats.get('index_fullness', 0) * 100
                    st.metric("–ó–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å", f"{fullness:.1f}%")
        except Exception as e:
            st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–Ω–¥–µ–∫—Å–∞: {e}")
        
        # Test search functionality
        st.markdown("## üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞")
        
        # Expected content info
        st.info("""
        **–û–∂–∏–¥–∞–µ–º—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –≤ –≤–∞—à–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–µ:**
        - Delta measures an option's price sensitivity to changes in the price of the underlying asset
        - ‚àÜc = e‚àíqtopt ¬∑ N(d1) –¥–ª—è call –æ–ø—Ü–∏–æ–Ω–æ–≤  
        - ‚àÜp = ‚àíe‚àíqtopt ¬∑ N(‚àíd1) –¥–ª—è put –æ–ø—Ü–∏–æ–Ω–æ–≤
        - Vega measures the sensitivity of the option price to changes in implied volatility
        - V = P0‚àötopte^(-d‚ÇÅ¬≤/2) ‚àö(1/2œÄ)
        - Daily management of Delta exposure and regular adjustments to Vega exposure
        """)
        
        # Debug mode toggle
        debug_mode = st.checkbox("üîç –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ (–ø–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –ø–æ–∏—Å–∫–∞)", value=True)
        st.session_state.debug_mode = debug_mode
        
        # Predefined test questions
        test_questions = [
            "Delta", 
            "—Ñ–æ—Ä–º—É–ª–∞ Delta",
            "—á—Ç–æ —Ç–∞–∫–æ–µ Delta –æ–ø—Ü–∏–æ–Ω–∞?",
            "vega –∏–∑–º–µ—Ä—è–µ—Ç —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å",
            "–æ–ø—Ü–∏–æ–Ω",
            "volatility",
            "‚àÜc = e‚àíqtopt ¬∑ N(d1)",
            "–≤–µ–≥–∞ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å",
            "–º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–æ—Ä–º—É–ª—ã",
            "Daily management of Delta exposure",
            "—á–∏—Å–ª–æ –æ–ø—Ü–∏–æ–Ω–æ–≤ –∑–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —à–∞–≥"
        ]
        
        col1, col2 = st.columns([2, 1])
        with col1:
            question = st.text_input(
                "–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: —á—Ç–æ —Ç–∞–∫–æ–µ Delta?"
            )
        with col2:
            selected_test = st.selectbox("–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å:", [""] + test_questions)
        
        if selected_test:
            question = selected_test
        
        # Search method selection
        search_method = st.radio(
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –ø–æ–∏—Å–∫–∞:",
            ["üöÄ –£–ª—É—á—à–µ–Ω–Ω—ã–π v3 (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)", "‚ö†Ô∏è –ë–∞–∑–æ–≤—ã–π –≤–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫", "üîÑ –ì–∏–±—Ä–∏–¥–Ω—ã–π (v3 + fallback)"],
            index=0 if self.enhanced_processor else 1
        )
        
        if st.button("üöÄ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∏—Å–∫", disabled=not question):
            if question:
                self._test_search(question, vectorstore, search_method)
        
        # Direct index query test
        st.markdown("## üî¨ –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫ –∏–Ω–¥–µ–∫—Å—É")
        
        if st.button("üìä –ü–æ–∫–∞–∑–∞—Ç—å –æ–±—Ä–∞–∑—Ü—ã –≤–µ–∫—Ç–æ—Ä–æ–≤"):
            self._show_sample_vectors(vectorstore)
    
    def _test_search(self, question, vectorstore, search_method):
        """Test search with detailed output"""
        st.markdown(f"### –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞: '{question}'")
        st.markdown(f"**–ú–µ—Ç–æ–¥ –ø–æ–∏—Å–∫–∞:** {search_method}")
        
        # Enable logging display
        import io
        import sys
        
        # Capture logs
        log_capture = io.StringIO()
        handler = logging.StreamHandler(log_capture)
        handler.setLevel(logging.INFO)
        formatter = logging.Formatter('%(levelname)s - %(message)s')
        handler.setFormatter(formatter)
        
        logger = logging.getLogger('utils.rag')
        logger.addHandler(handler)
        logger.setLevel(logging.INFO)
        
        try:
            # Test the search based on selected method
            with st.spinner("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–∏—Å–∫..."):
                if search_method.startswith("üöÄ") and self.enhanced_processor:
                    # Enhanced v3 search
                    from utils.enhanced_rag import enhanced_rag
                    answer = enhanced_rag.query_with_enhanced_processor(question, self.enhanced_processor)
                elif search_method.startswith("üîÑ"):
                    # Hybrid search
                    answer = ask_question_enhanced(question, vectorstore, self.enhanced_processor)
                else:
                    # Basic vectorstore search
                    answer = ask_question(question, vectorstore)
            
            # Show results
            st.markdown("#### üí¨ –û—Ç–≤–µ—Ç:")
            st.write(answer)
            
            # Show captured logs
            log_output = log_capture.getvalue()
            if log_output:
                st.markdown("#### üìã –õ–æ–≥–∏ –ø–æ–∏—Å–∫–∞:")
                st.code(log_output, language="text")
            
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
            import traceback
            st.code(traceback.format_exc())
        finally:
            logger.removeHandler(handler)
    
    def _show_sample_vectors(self, vectorstore):
        """Show sample vectors from the index"""
        st.markdown("### üìä –û–±—Ä–∞–∑—Ü—ã –≤–µ–∫—Ç–æ—Ä–æ–≤ –≤ –∏–Ω–¥–µ–∫—Å–µ")
        
        try:
            # Try to get some sample data
            if hasattr(vectorstore, '_index'):
                index = vectorstore._index
                
                # Try to query with a dummy vector to see what's stored
                dummy_query = [0.0] * 1536  # OpenAI embedding dimension
                
                query_result = index.query(
                    vector=dummy_query,
                    top_k=5,
                    include_metadata=True
                )
                
                st.write(f"–ù–∞–π–¥–µ–Ω–æ {len(query_result.matches)} –≤–µ–∫—Ç–æ—Ä–æ–≤ –≤ –∏–Ω–¥–µ–∫—Å–µ:")
                
                for i, match in enumerate(query_result.matches):
                    with st.expander(f"–í–µ–∫—Ç–æ—Ä {i+1} (ID: {match.id})"):
                        st.write(f"**Score:** {match.score}")
                        st.write("**–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ:**")
                        st.json(match.metadata)
                        
                        # Show content if available
                        if 'content' in match.metadata:
                            st.write("**–ö–æ–Ω—Ç–µ–Ω—Ç:**")
                            content = match.metadata['content']
                            st.code(content[:500] + "..." if len(content) > 500 else content)
            else:
                st.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∏–Ω–¥–µ–∫—Å—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–±—Ä–∞–∑—Ü–æ–≤")
                
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±—Ä–∞–∑—Ü–æ–≤: {e}")
            import traceback
            st.code(traceback.format_exc())

def render_debug_page():
    """Render the debug page"""
    debug_page = DebugPage()
    debug_page.render()